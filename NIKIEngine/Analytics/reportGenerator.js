"use strict";

// SPDX-License-Identifier: ATOMIC-Limited-1.0
// ------------------------------------------------------------------------------
// ATOMIC (Advanced Technologies Optimizing Integrated Chains)
// Copyright (c) 2023 ATOMIC, Ltd.
// All rights reserved.
//
// Module: Report Generator for NIKI Analytics
//
// Description:
// Generates detailed reports based on predictive analytics, system health, 
// and operational insights. Supports multiple formats (e.g., JSON, PDF, HTML).
//
// Author: Shawn Blackmore
//
// Dependencies:
// - fs-extra: For file operations.
// - json2html: For HTML conversion.
// - pdfkit: For generating PDF reports.
// - lodash: For data manipulation and summarization.
//
// ------------------------------------------------------------------------------

const fs = require("fs-extra");
const PDFDocument = require("pdfkit");
const json2html = require("node-json2html");
const _ = require("lodash");

// Constants
const REPORTS_DIR = "./Reports";
const DEFAULT_REPORT_TYPE = "JSON";

/**
 * Generates a system report based on input data and desired format.
 * @param {string} reportName - Name of the report file (without extension).
 * @param {Object} reportData - Data to include in the report.
 * @param {string} [format=DEFAULT_REPORT_TYPE] - Report format ('JSON', 'HTML', 'PDF').
 * @returns {Promise<string>} - Path to the generated report.
 */
async function generateReport(reportName, reportData, format = DEFAULT_REPORT_TYPE) {
    try {
        console.log(`[NIKI] Generating report: ${reportName}.${format.toLowerCase()}`);
        const reportPath = `${REPORTS_DIR}/${reportName}.${format.toLowerCase()}`;

        // Ensure reports directory exists
        await fs.ensureDir(REPORTS_DIR);

        switch (format.toUpperCase()) {
            case "JSON":
                await fs.writeJson(reportPath, reportData, { spaces: 2 });
                break;
            case "HTML":
                await generateHtmlReport(reportPath, reportData);
                break;
            case "PDF":
                await generatePdfReport(reportPath, reportData);
                break;
            default:
                throw new Error(`Unsupported report format: ${format}`);
        }

        console.log(`[NIKI] Report generated successfully: ${reportPath}`);
        return reportPath;
    } catch (error) {
        console.error(`[NIKI] Failed to generate report: ${error.message}`);
        throw error;
    }
}

/**
 * Generates a report in HTML format.
 * @param {string} reportPath - Path to save the HTML report.
 * @param {Object} reportData - Data to include in the report.
 */
async function generateHtmlReport(reportPath, reportData) {
    const htmlTemplate = {
        "<>": "div",
        "html": [
            { "<>": "h1", "text": "ATOMIC System Report" },
            { "<>": "p", "text": "Generated by NIKI Analytics" },
            {
                "<>": "ul",
                "html": _.map(reportData, (value, key) => ({
                    "<>": "li",
                    "html": [
                        { "<>": "strong", "text": `${key}: ` },
                        { "<>": "span", "text": JSON.stringify(value, null, 2) }
                    ]
                }))
            }
        ]
    };

    const htmlContent = json2html.transform({}, htmlTemplate);
    await fs.writeFile(reportPath, htmlContent);
}

/**
 * Generates a report in PDF format.
 * @param {string} reportPath - Path to save the PDF report.
 * @param {Object} reportData - Data to include in the report.
 */
async function generatePdfReport(reportPath, reportData) {
    const doc = new PDFDocument();
    const writeStream = fs.createWriteStream(reportPath);

    doc.pipe(writeStream);
    doc.fontSize(20).text("ATOMIC System Report", { align: "center" });
    doc.fontSize(12).text("Generated by NIKI Analytics", { align: "center" });
    doc.moveDown();

    _.forEach(reportData, (value, key) => {
        doc.fontSize(14).text(`${key}:`, { underline: true });
        doc.fontSize(12).text(JSON.stringify(value, null, 2));
        doc.moveDown();
    });

    doc.end();

    // Wait for the write stream to finish
    return new Promise((resolve, reject) => {
        writeStream.on("finish", () => resolve());
        writeStream.on("error", (err) => reject(err));
    });
}

/**
 * Summarizes report data for quick insights.
 * @param {Object} data - Raw data to summarize.
 * @returns {Object} - Summary of key insights.
 */
function summarizeData(data) {
    return {
        totalNodes: data.nodes ? data.nodes.length : 0,
        averageCpuLoad: _.meanBy(data.nodes || [], "cpuLoad"),
        averageMemoryUsage: _.meanBy(data.nodes || [], "memoryUsage"),
        highRiskNodes: (data.nodes || []).filter(node => node.cpuLoad > 90 || node.memoryUsage > 85).length,
    };
}

// Exported Functions
module.exports = {
    generateReport,
    summarizeData,
};
